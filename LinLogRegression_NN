# -*- coding: utf-8 -*-
"""QuasarClassificationProject_DataTesters_fromDec23

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tUjpouWJFJzsqXsKZk0GMrBQYQsXZBRQ
"""

# Standard Library Imports
!pip install scikit-learn

# Third-Party Library Imports
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns  # Use sns as the standard alias for seaborn

from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten, Input
from keras.utils import to_categorical

from sklearn.datasets import fetch_openml, make_classification
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import (
    confusion_matrix,
    ConfusionMatrixDisplay,
    precision_recall_curve,
    PrecisionRecallDisplay,
    roc_curve,
    RocCurveDisplay,
)
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.svm import SVC

from tensorflow.keras.models import Sequential as Sequential  # Avoid conflicts with Keras Sequential
from tensorflow.keras.layers import Dense as TfDense, Dropout as TfDropout
from tensorflow.keras.utils import plot_model, to_categorical as tf_to_categorical

# Colab-Specific Imports
from google.colab import drive

#import os
from google.colab import drive
drive.mount('/content/drive')

#os.chdir("drive/My Drive/Colab Notebooks/ccir-data")
#!ls

# X, y = fetch_openml(data_id=1464, return_X_y=True, parser="pandas")
data = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/ccir-data/Skyserver_Radial8_18_2024 4_50_58 AM.csv", skiprows=1)
data

drive.mount('/content/drive')

#os.chdir("drive/My Drive/Colab Notebooks/ccir-data")
#!ls

# X, y = fetch_openml(data_id=1464, return_X_y=True, parser="pandas")
data = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/ccir-data/Skyserver_CrossID9_15_2024 4_18_42 AM.csv", skiprows=1)
data

#X = np.vstack([data['u-g'], data['g-r'], data['r-i'], data['i-z']]).T
X1 = np.vstack([data['u'], data['g'], data['r'], data['i'], data['z']]).T
y1 = (data['class'])

y1

data = pd.DataFrame(data)
data['class'][data['class'] == True] = 'Star'
data['class'][data['class'] == False] = 'Quasar'

#seaborn.pairplot(data.sample(frac=1).iloc[:100], hue='class', corner=True, kind='scatter')

# Train test validation set splitting
X_train, X_test, y_train, y_test = train_test_split(X1, y1, test_size=0.1, random_state=42)
X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=1/9, random_state=42)



model = LogisticRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

print(y_pred)
print(y_test)

accuracy = float(np.sum(y_test == y_pred)) / len(y_test)
print(accuracy)

cm = confusion_matrix(y_test, y_pred, labels=model.classes_)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=model.classes_)
disp.plot(cmap=plt.cm.Blues)

y_score = model.predict_proba(X_test)
print(y_score)

fpr, tpr, thresh = roc_curve(y_test, y_score[:,1], pos_label=model.classes_[1])
roc_display = RocCurveDisplay(fpr=fpr, tpr=tpr).plot()
auc = np.trapz(tpr, fpr)
print(auc)

prec, recall, _ = precision_recall_curve(y_test, y_score[:,1], pos_label=model.classes_[1])
pr_display = PrecisionRecallDisplay(precision=prec[:-3000], recall=recall[:-3000]).plot()
auc = -np.trapz(prec, recall)
print(auc)

recall, prec[100]

X_test

y_train

"""**NEURAL NETWORK**
---


"""

# Initialize LabelEncoder
label_encoder = LabelEncoder()

# Fit and transform y_train to numerical labels
y_train_encoded = label_encoder.fit_transform(y_train)

# Transform y_test using the same encoder
y_test_encoded = label_encoder.transform(y_test)

# Now apply one-hot encoding
y_train_1h = to_categorical(y_train_encoded, num_classes=3) # Explicitly set num_classes
y_test_1h = to_categorical(y_test_encoded, num_classes=3) # Explicitly set num_classes
print(y_train_1h.shape)
print(y_test_1h.shape)

# Build the network with the correct configuration
model = Sequential()
model.add(Dense(256, activation='relu', input_shape=(X_train.shape[-1],)))  # First layer
model.add(Dropout(0.1))
model.add(Dense(128, activation='relu'))  # Intermediate layer 1
model.add(Dropout(0.1))
model.add(Dense(128, activation='relu'))  # Intermediate layer 2
model.add(Dropout(0.1))
model.add(Dense(3, activation='softmax'))

# Compile the model
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

# Train the model
history = model.fit(X_train, y_train_1h, epochs=13, batch_size=128, validation_data=(X_test, y_test_1h), verbose=1)

# Evaluate the model
test_loss, test_accuracy = model.evaluate(X_test, y_test_1h, verbose=1)
print(f"Test Accuracy: {test_accuracy:.2f}")

plt.plot(history.history['accuracy'], label='train')
plt.plot(history.history['val_accuracy'], label='validation')
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend()

print("---- Neural Network Predictions and Accuracy ----")
# Make predictions
y_pred = model.predict(X_test)
# Convert predictions and test labels back to class labels
y_pred_classes = np.argmax(y_pred, axis=1)  # Predicted classes from probabilities
y_test_classes = np.argmax(y_test_1h, axis=1)  # True classes from one-hot encoding

# Calculate accuracy
accuracy_nn = np.sum(y_pred_classes == y_test_classes) / len(y_test_classes)
print(f"Neural Network Accuracy: {accuracy_nn:.2f}")

# Header: Confusion Matrix
print("---- Confusion Matrix ----")
# Define the actual class labels
class_labels = ["Galaxy", "QSO", "Star"]

# Generate the confusion matrix
# Confusion matrix
cm_nn = confusion_matrix(y_test_classes, y_pred_classes, labels=[0, 1, 2])
disp_nn = ConfusionMatrixDisplay(confusion_matrix=cm_nn, display_labels=class_labels)
disp_nn.plot(cmap="Purples", values_format="d")
plt.title("Confusion Matrix: Neural Network")
plt.show()

# Generate ROC Curve for Neural Network
fpr, tpr, _ = roc_curve(y_test_1h[:, 1], y_pred[:, 1])
roc_display = RocCurveDisplay(fpr=fpr, tpr=tpr).plot()
plt.title("ROC Curve for Neural Network")
plt.show()

# Calculate AUC
auc_nn = np.trapz(tpr, fpr)
print(f"Neural Network AUC: {auc_nn:.2f}")

# Generate Precision-Recall Curve for Neural Network
prec, recall, _ = precision_recall_curve(y_test_1h[:, 1], y_pred[:, 1])
pr_display = PrecisionRecallDisplay(precision=prec, recall=recall).plot()
plt.title("Precision-Recall Curve for Neural Network")
plt.show()

# Plot Training and Validation Loss
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Neural Network Loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend()
plt.show()

from tensorflow.keras.utils import plot_model

# Visualize the model architecture
plot_model(model, to_file='model_plot.png', show_shapes=True, show_layer_names=True)
